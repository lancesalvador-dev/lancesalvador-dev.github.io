---
layout: post
title: "'the fish' - a Discord Bot"
date: 2024-08-16
excerpt: "A WIP multi-purpose Discord bot."
tags: [Rust]
feature: https://raw.githubusercontent.com/lancesalvador-dev/lancesalvador-dev.github.io/master/assets/img/fish%20bg.jpg
comments: true 
project: true # it took too long to figure out I had to add this line for the post to show up in Projects 
--- 

<!-- gif of running hi command to fishbot - put "fish" subtitle under the picture -->
Meet <b>[the fish](https://github.com/lancesalvador-dev/the-fish)</b>, a Discord Bot I built to learn more about the Rust Programming Language, API interaction and bot applications.
<div class="cropper">
<video id="fish-video" playsinline autoplay loop muted>
    <source src="https://github.com/user-attachments/assets/3df534a9-f3d1-4005-908c-7fddde1d0932" type="video/mp4">
</video>
</div>
<figcaption>Video demonstrating fish's commands</figcaption>

### Building the fish
While most of the fish's other commands are generally self explanatory and were pretty straight-forward to build, the most complex part of building 'fish' was making the `~pp` command; which was made to be used by players of the free online rhythm game [osu!](https://osu.ppy.sh/). <br>A fellow programmer (and osu! player) friend of mine was a big inspiration and the main reason why I actually built this project, and he was a huge help in directing me to the libraries to do so.

The command takes a link to a 'beatmap' <i>(what each of the different user-generated levels are called)</i>, and the fish replies with an embed displaying the name of the map, difficulty, the highest amount of Performance Points (PP) you could gain from clearing that beatmap - along with various other bits of information. <br> My favorite feature in building this command was making the left sidebar of the embed match the given map's primary color from its background image. 

The hardest problem I ran into developing the command is that it took me the longest while to find a method in a library's documentation that returned a specific data type I needed - because the naming of the method lead me to believe it functioned different from what it actually was for. 

The experience ultimately taught me to think outside of the box more, and that some external methods may have been named from a different perspective than you view from.

### Things I learnt
- Using crates.io to implement external Rust libraries and their methods
- Finding the primary/accent color used in an image
- Structure of a Discord embed

### Planned features
- Music functionality 
- GPT chatbot command
- File ext. conversion for video files (e.g. .mkv -> mp4)
- Time based message purging <i>(e.g. get rid of all messages in the past 15 minutes)</i> to make clearing out my code testing channel easier


You can find the fish's source code [here](https://github.com/lancesalvador-dev/the-fish). 

